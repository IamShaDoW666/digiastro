---
import { Image } from "astro:assets";
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Product from "../../components/product";
import ProductTabBtn from "../../components/widgets/ProductTabBtn.astro";
import PrimaryCTA from "../../components/widgets/PrimaryCTA.astro";

export async function getStaticPaths() {
  const productEntries = await getCollection("products");
  return productEntries.map((product) => ({
    params: { slug: product.slug },
    props: { product },
  }));
}


const { product } = Astro.props;
---

<Layout title={product.data.main.title + " |Digital Link Technology"}>
  <!-- <div id="overlay" class="fixed inset-0 bg-neutral-200 dark:bg-neutral-800">
  </div> -->
 
  

  <div class="mx-auto max-w-[85rem] px-4 pt-10 sm:px-6 lg:px-8 lg:pt-14">
    <Product product={product} client:load />
    <nav
      class="mx-auto grid max-w-6xl gap-y-px sm:flex sm:gap-x-4 sm:gap-y-0  mt-4"
      aria-label="Tabs"
      role="tablist"
    >
      {
        product.data.tabs.map((tab:any, index:any) => (
          <ProductTabBtn
            title={tab.title}
            id={tab.id}
            dataTab={tab.dataTab}
            first={index === 0}
          />
        ))
      }
    </nav>

    <div class="mt-12 md:mt-16">
      <div id="tabs-with-card-1" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid gap-12 md:grid-cols-2 bg-neutral-600 hover:bg-neutral-700 p-8 rounded-2xl">
            <div class="lg:w-3/4 border-1 px-4 ">
              <h2
                class="text-balance text-3xl font-bold tracking-tight text-white  md:leading-tight lg:text-4xl"
              >
                {product.data.description.title}
              </h2>
              <p
                class="mt-3 text-pretty text-white "
              >
                {product.data.description.subTitle}
              </p>
              <p class="mt-5 p-4">
                <PrimaryCTA
                  title={product.data.description.btnTitle}
                  url={product.data.description.btnURL}
                />
              </p>
            </div>

            <div class="space-y-6 lg:space-y-10  px-4 border-1">
              {
                product.data.descriptionList.map((list:any) => (
                  <div class="flex">
                    <div>
                      <h3 class="text-base  text-white d sm:text-lg">
                        {list.title}
                      </h3>
                     
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>

      <div id="tabs-with-card-2" class="hidden" role="tabpanel">
        <div class="mx-auto max-w-[85rem] px-4 pb-10 sm:px-6 lg:px-8 lg:pb-14">
          <div class="grid w-full grid-cols-1 gap-x-16 md:grid-cols-2 bg-neutral-600 hover:bg-neutral-700 p-8 rounded-2xl">
            <div class="max-w-md space-y-6">
              {
                product.data.specificationsLeft.map((spec:any) => (
                  <div>
                    <h3 class="block font-bold text-white">
                      {spec.title}
                    </h3>
                    <p class="text-white">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
            </div>
            <div class="mt-6 max-w-md space-y-6 md:ml-auto md:mt-0">
              {
                product.data.specificationsRight?.map((spec:any) => (
                  <div>
                    <h3 class="block font-bold text-white">
                      {spec.title}
                    </h3>
                    <p class="text-white">
                      {spec.subTitle}
                    </p>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
  

  <div id="tabs-with-card-3" class="hidden" role="tabpanel">
    <!-- <div class="mx-auto mb-20 flex max-w-[85rem] md:mb-28  gap-4 bg-white"> -->
      <div class="grid mx-auto max-w-[85rem] grid-cols-1 px-8 gap-x-16 md:grid-cols-3 mb-8 bg-neutral-600 hover:bg-neutral-700 py-8 rounded-2xl">
      <div
        class="px-8 overflow-hidden rounded-xl shadow-lg md:left-12 md:top-16 md:-ml-12 lg:ml-0"
      >


      {
          product.data.blueprints.first && (
            <Image
              src={product.data.blueprints.first}
              class="h-64 w-64 object-contain"
              alt="Blueprint Illustration"
              format={"jpg"}
            />
          )
        }
      </div>
      <div
      class="px-8 overflow-hidden rounded-xl shadow-lg md:left-12 md:top-16 md:-ml-12 lg:ml-0"
    >


    {
        product.data.blueprints.first && (
          <Image
            src={product.data.blueprints.first}
            class="h-64 w-64 object-contain"
            alt="Blueprint Illustration"
            format={"jpg"}
          />
        )
      }
    </div>
    <div
    class="px-8 overflow-hidden rounded-xl shadow-lg md:left-12 md:top-16 md:-ml-12 lg:ml-0"
  >


  {
      product.data.blueprints.first && (
        <Image
          src={product.data.blueprints.first}
          class="h-64 w-64 object-contain"
          alt="Blueprint Illustration"
          format={"jpg"}
        />
      )
    }
  </div>
</div>
</div>
      

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      function setButtonInactive(btn: any, activeButton: any) {
        if (btn !== activeButton) {
          btn.classList.remove(
            "active",
            "bg-neutral-100",
            "hover:border-transparent",
            "dark:bg-white/[.05]",
          );

          const tabId = btn.getAttribute("data-target");
          if (tabId) {
            const contentElement = document.querySelector(tabId);
            if (contentElement) {
              contentElement.classList.add("hidden");
            }
          }

          changeHeadingStyle(
            btn,
            ["text-neutral-800", "dark:text-neutral-200"],
            ["text-[#fa5a15]", "dark:text-[#fb713b]"],
          );
        }
      }

      function activateButton(button: any) {
        button.classList.add(
          "active",
          "bg-neutral-100",
          ",hover:border-transparent",
          "dark:bg-white/[.05]",
        );

        const tabId = button.getAttribute("data-target");
        if (tabId) {
          const contentElementToShow = document.querySelector(tabId);
          if (contentElementToShow) {
            contentElementToShow.classList.remove("hidden");
          }
        }

        changeHeadingStyle(
          button,
          ["text-[#fa5a15]", "dark:text-[#fb713b]"],
          ["text-neutral-800", "dark:text-neutral-200"],
        );
      }

      function changeHeadingStyle(
        button: any,
        addClasses: any,
        removeClasses: any,
      ) {
        let heading = button.querySelector("span");
        if (heading) {
          heading.classList.remove(...removeClasses);
          heading.classList.add(...addClasses);
        }
      }

      const tabButtons = document.querySelectorAll("[data-target]");

      if (tabButtons.length > 0) {
        changeHeadingStyle(
          tabButtons[0],
          ["text-[#fa5a15]", "dark:text-[#fb713b]"],
          [],
        );
      }

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          tabButtons.forEach((btn) => setButtonInactive(btn, button));
          activateButton(button);
        });
      });
    });
  </script>
</MainLayout>
